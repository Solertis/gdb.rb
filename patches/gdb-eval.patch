diff --git a/python/py-value.c b/python/py-value.c
index 0146593..8f8c610 100644
--- a/python/py-value.c
+++ b/python/py-value.c
@@ -972,6 +972,27 @@ gdbpy_history (PyObject *self, PyObject *args)
   return value_to_value_object (res_val);
 }
 
+/* Returns value object for a given expression.  */
+PyObject *
+gdbpy_eval (PyObject *self, PyObject *args)
+{
+  char *arg;
+  struct value *res_val = NULL;	  /* Initialize to appease gcc warning.  */
+  volatile struct gdb_exception except;
+
+  if (! PyArg_ParseTuple (args, "s", &arg))
+    return NULL;
+
+  TRY_CATCH (except, RETURN_MASK_ALL)
+    {
+      res_val = parse_and_eval (arg);
+    }
+  GDB_PY_HANDLE_EXCEPTION (except);
+
+  return value_to_value_object (res_val);
+}
+
+
 void
 gdbpy_initialize_values (void)
 {
diff --git a/python/python-internal.h b/python/python-internal.h
index 67a78af..fbf8247 100644
--- a/python/python-internal.h
+++ b/python/python-internal.h
@@ -68,6 +68,7 @@ extern PyObject *gdb_module;
 extern PyTypeObject value_object_type;
 
 PyObject *gdbpy_history (PyObject *self, PyObject *args);
+PyObject *gdbpy_eval (PyObject *self, PyObject *args);
 PyObject *gdbpy_frame_stop_reason_string (PyObject *, PyObject *);
 PyObject *gdbpy_selected_frame (PyObject *self, PyObject *args);
 PyObject *gdbpy_lookup_type (PyObject *self, PyObject *args, PyObject *kw);
diff --git a/python/python.c b/python/python.c
index 254bd28..c96fa29 100644
--- a/python/python.c
+++ b/python/python.c
@@ -651,6 +651,8 @@ static PyMethodDef GdbMethods[] =
 {
   { "history", gdbpy_history, METH_VARARGS,
     "Get a value from history" },
+  { "eval", gdbpy_eval, METH_VARARGS,
+    "Get a value of an expression" },
   { "execute", execute_gdb_command, METH_VARARGS,
     "Execute a gdb command" },
   { "parameter", gdbpy_parameter, METH_VARARGS,
